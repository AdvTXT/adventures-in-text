To do

- put object attributes as default arguments so that they can be customized more easily?
- have dynamic container and room descriptions so that they can return something about the objects inside them
    - Container.look_in returns container.objects
- better way to set room exits when initializing
- grammar
  - have grammar dealt with in its own function?  
  - have a function that splits up action and deals with it appropriately
  - better grammar for underscore actions (e.g. look_in -- be able to say "look in <object>")
  - ability to use adjectives (e.g. "get brass lamp") 
- support for having multiple objects with the same obj.name (right now, would run into a conflict)
- use try/except blocks for get/drop/look so that if user types in something that is not an object, it doesn't throw an error




- throwing exceptions for required attributes that are not provided
- class methods of serialise/de-serialise
- standardise parameters to accept inventory and location?
- grammar function that takes action, inventory, location and returns (obj, verb) for the play_game function to deal with
- in light of passing in room and inv, can rethink UnreachableLightable and Climable private methods/attributes?