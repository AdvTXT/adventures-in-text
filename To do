To do

- put object attributes as default arguments so that they can be customized more easily?
- have dynamic container and room descriptions so that they can return something about the objects inside them
- better way to set room exits when initializing
- grammar
    - have support for more than four-word actions
    - use lambdas or mapping instead of list comprehensions
    - less hardcoded, more intelligent processing
    - better default error processing instead of setting VERBS on base Object
- setting new_game = deepcopy(old_game) in play_game.py makes locations not update properly
- throw exceptions for required attributes that are not provided
- set class methods serialise/de-serialise to help with database storage (instead of pickling)
- in light of passing in room and inv, can rethink UnreachableLightable and Climable private methods/attributes?
- serialise/deserialise
    - serialise and deserialise won't track changes to objects inside other objects
    - not good support for objects changing between room and inventory
    - all objects are checked against base game (assumes that no objects get created or destroyed -- might want to change)
- overload equality operators in Room and Object classes so that can compare relative equality (e.g. bedroom.name == bedroom.name)
